#!/bin/sh
# dropbadips processes mox mail server log files to identify obvious bad actors
# and add a DROP rule for their IP.
#
# The script attempts to insert an ACCEPT rule for your IP address to avoid
# locking out an admin, if run from the command line, and any IPs listed in
# /etc/dontblockme.
#
# Note: This isn't a replacement for fail2ban; it's specific to mox and *may*
# be extended to parse other log files.
#
# Currently the script adds a DROP rule for:
# - failed authentication to the mail server (imap or otherwise)
# - SPF rejects, sure sign of spammers and scammers
# - DNSBL rejects, could cause problems for some
#
# There are also static IP blocks added manually from time to time when
# egregious spammers slipping through are identified.
#
# IMPORTANT: When making changes, don't forget to re-install the script with:
#   dropips install

log() {
    /usr/bin/logger -p mail.info -t "$BASE" l=info pkg=dropbadips m=\""$1"\"
}

SCRIPT=$(test -L "$0" && readlink "$0" || echo "$0")
BASE=$(basename "$SCRIPT")
LOGCMD="/usr/bin/logger -p mail.info -t $BASE l=info"
COUNTRIES=""

log "$SCRIPT starting, command line parameter [$1]"

if [ "$(id -u)" -ne 0 ]; then
    echo "$SCRIPT must be run as root."
    log "$SCRIPT must be run as root."
    exit
fi

. /etc/os-release
case $ID in
chimera)
    LOGCURRENT="cat /var/log/mail.log"
    # TODO until logrotate happens
    LOGALL="cat /var/log/mail.log"
    ;;
void)
    LOGCURRENT="cat /var/log/socklog/messages/current"
    LOGALL="cat /var/log/socklog/messages/@* /var/log/socklog/messages/current"
    ;;
"opensuse-microos")
    LOGCURRENT="journalctl -u mox.service -t moxproduction --no-pager --since today"
    LOGALL="journalctl -u mox.service -t moxproduction --no-pager"
    ;;
*)
    echo "Unsupported Linux distribution. If running in a distrobox, run from the root OS."
    exit 1
    ;;
esac

# default
SCOPE=$LOGCURRENT

install() {
    . /etc/os-release
    case $ID in
    chimera)
        cp $SCRIPT /usr/bin/$BASE
        chmod +x /usr/bin/$BASE
        log "$BASE installed itself to /usr/bin/$BASE; run by cron"
        ;;
    void)
        # ensure the latest is installed in hourly
        # Note: Void/runit run-parts command won't launch a script ending in .sh
        cp $SCRIPT /etc/cron.hourly/$BASE
        chmod +x /etc/cron.hourly/$BASE
        log "$BASE installed itself to /etc/cron.hourly/"
        ;;
    "opensuse-microos")
        cp $SCRIPT /usr/local/bin/$BASE
        log "$BASE installed itself to /usr/local/bin; ensure systemd-timer setup"
        ;;
    *)
        echo "Unsupported Linux distribution. If running in a distrobox, run from the root OS."
        exit 1
        ;;
    esac
}

block_countries() {
    BASE_URL="https://www.ipdeny.com/ipblocks/data/aggregated/"
    URL_SUFFIX="-aggregated.zone"

    for cc in $COUNTRIES; do
        URL="$BASE_URL$cc$URL_SUFFIX"
        log "dropping country $cc and reloading"

        ipset destroy -q "drop-$cc"
        ipset create "drop-$cc" -exist hash:net maxelem 90000

        for ip in $(fetch -o - "$URL"); do
            ipset add -exist -q "drop-$cc" "$ip"
        done
        # add the drop rule for the set
        iptables -I INPUT -m set --match-set "drop-$cc" src -j DROP
    done
}

# command line argument are optional:
# - install: copy script to root executable location for snooze (Void) or systemd-timer (opensuse-microos)
# - all: rescan all logs today and prior
# - reset: drop current iptables, import any countries defined, and process all the log files current and past
#          reset may get run once on boot
if [ ! $# -eq 0 ]; then
    if [ "$1" = "install" ]; then
        install
        echo "Installed, exiting"
        exit
    elif [ "$1" = "all" ]; then
        SCOPE=$LOGALL
        log "scanning all logs"
    elif [ "$1" = "reset" ]; then
        # no params after reset
        if [ "$2" = "" ]; then
            echo "$BASE reset: requires at least one country code as parameter"
            echo "eg: $BASE reset ru cn"
            exit
        fi
        log "resetting iptables and dropping sets"
        iptables -F
        ipset destroy
        # after arg 1, any remaining args are countries
        shift
        COUNTRIES=""
        for var in "$@"; do
            COUNTRIES="${COUNTRIES:+${COUNTRIES} }${var}"
        done
        log "dropping countries: $COUNTRIES"
        block_countries
        SCOPE=$LOGALL
        log "scanning all logs"
    else
        echo "$SCRIPT: Bad command: $1. Use install, all, or reset"
        log "$SCRIPT: Bad command: $1. Use install, all, or reset"
        exit
    fi
fi

# new blocks derived from logs
COUNT=0

# AVOID BLOCKING US / PROTECTED IPs
# Dynamic protection: assumes only sysadmin(s) or other authorized users that may be physically logged on
# when this script runs. INSERTS ACCEPT at start of ruleset to avoid blocking
DONTBLOCK=$(ss | grep ":ssh" | grep ESTAB | awk '{print $6}' | cut -d ":" -f 1 | sort | uniq)
# Add home or office static IP if any
if test -f /etc/dontblockme; then
    DONTBLOCKSTATIC=$(cat /etc/dontblockme)
fi
DONTBLOCK="$DONTBLOCK $DONTBLOCKSTATIC"
ipset create -exist -q "noblock" hash:ip
for ip in $DONTBLOCK; do
    if ! ipset test -q noblock "$ip"; then
        ipset add -exist -q noblock "$ip"
        log "ACCEPT rule added for $ip"
    fi
done
# this table only is INSERTED at the start, all others are APPENDED
iptables -I INPUT -m set --match-set noblock src -j ACCEPT

# TIME TO DROP IPs
# all other rules are APPENDED
# mail system, failed auth
ipset create -exist -q failedauth hash:ip maxelem 120000
for ip in $($SCOPE | grep 'm="failed authentication attempt"' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq); do
    if ! echo "$DONTBLOCK" | grep -q "$ip"; then
        if ! ipset test -q failedauth "$ip"; then
            ipset add -exist -q failedauth "$ip"
            COUNT=$((COUNT + 1))
            log "failedauth DROP $ip"
        fi
    else
        log "failedauth NOT DROPPED due to dontblock $ip"
    fi
done
iptables -A INPUT -m set --match-set failedauth src -j DROP

# mail system, spf violators - all are attacks on our domains or spoofs of legit biz
ipset create -exist -q spffail hash:ip maxelem 2000
for ip in $($SCOPE | grep 'm=".*spf fail.*"' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq); do
    if ! echo "$DONTBLOCK" | grep -q "$ip"; then
        # Adds an ip or /netblock to iptables drop list, if it isn't already in there
        # Unless iptables has been flushed recently, this will always be false
        if ! ipset test -q spffail "$ip"; then
            # NOT ADDING THESE AT PRESENT LET'S SEE HOW MANY
            # ipset add -exist -q spffail "$ip"
            COUNT=$((COUNT + 1))
            log "spffail WAS NOT DROP - evaluate $ip"
        fi
    fi
done
iptables -A INPUT -m set --match-set spffail src -j DROP

# mail system, dnsbl rejects, often for malware
ipset create -exist -q dnsbl hash:ip maxelem 120000
# example:
# 2024-10-10 01:44:33 info mox[3064]: l=info m="rejecting due to listing in dnsbl" pkg=smtpserver zone=sbl.spamhaus.org explanation="Error: open resolver; https://check.spamhaus.org/returnc/pub/104.207.157.76/" mailfrom=yrquvrr@offroderz.de rcptto=hello@solutionroute.ca cid=19272dcede1 delta=175.298792m
for ip in $($SCOPE | grep "rejecting due to listing in dnsbl" | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq); do
    if ! echo "$DONTBLOCK" | grep -q "$ip"; then
        # Adds an ip or /netblock to iptables drop list, if it isn't already in there
        # Unless iptables has been flushed recently, this will always be false
        if ! ipset test -q dnsbl "$ip"; then
            ipset add -exist -q dnsbl "$ip"
            COUNT=$((COUNT + 1))
            log "dnsbl DROP $ip"
        fi
    fi
done
iptables -A INPUT -m set --match-set dnsbl src -j DROP

# IMPORTANT: When making changes, don't forget to install it to cron.hourly once tested.
# To install to cron.hourly run:
#   dropips install

# static list of noted bad actors ranging from frauds/scams to prolific spammers like leaseweb
# or hosts that repeatedly are reported for malware
BADACTORS="
77.221.157.109
95.211.0.0/16
102.210.41.0/24
176.88.185.0/24
179.152.0.0/14
186.33.88.128/25
190.42.0.0/17
196.176.0.0/14
41.211.128.0/19
103.164.146.0/24
103.131.104.225/23
105.240.0.0/8
105.0.0.0/16
213.202.192.0/18
217.79.176.0/20
89.163.128.0/17
46.165.192.0/18
178.162.128.0/18
62.212.64.0/19
212.32.224.0/19
185.49.69.0/24
37.48.64.0/18
5.79.64.0/18
81.171.0.0/19
83.149.64.0/18
37.48.64.0/18
62.210.0.0/16
163.172.0.0/16
200.75.0.0/19
192.119.160.0/20
155.94.191.0/24
23.95.37.0/25
165.140.240.0/22
109.71.254.0/24
41.61.0.0/17
77.87.208.0/21
31.28.27.0/24
5.104.104.0/21
187.20.0.0/14
102.130.120.0/24
185.75.240.0/24
103.4.188.0/24
89.185.84.0/24
77.87.208.0/21
31.28.27.0/24
23.95.37.0/25
193.222.96.0/24
80.76.49.0/24
43.158.217.0/24
45.125.66.0/25
62.173.128.0/19
43.143.0.0/16
111.0.0.0/10
27.115.0.0/17
80.244.11.0/24
191.180.0.0/14
103.31.179.0/24
149.54.32.0/24
212.102.40.0/23
92.53.111.0/24
143.110.166.49
159.89.8.234
167.99.200.210
209.97.180.160
165.227.221.227
62.4.0.0/19
5.79.64.0/18
62.173.141.0/24
62.173.149.0/24
31.28.27.0/24
83.149.64.0/18
85.17.0.0/16
95.211.0.0/16
5.79.64.0/18
77.90.185.0/24
185.82.218.0/23
185.94.167.0/24
45.88.186.0/24
94.141.120.0/24
5.30.192.0/19
"

# newline to loop through badactors
set -f
IFS='
'
ipset create -exist -q badactors hash:net
for ip in $BADACTORS; do
    # in case of expansion needs in the loop
    set +f
    unset IFS
    if ! echo "$DONTBLOCK" | grep -q "$ip"; then
        if ! ipset test -q badactors "$ip"; then
            ipset add -q -exist badactors "$ip"
            COUNT=$((COUNT + 1))
            log "badactors DROP $ip"
        fi
    fi
done
iptables -A INPUT -m set --match-set badactors src -j DROP
# again in case there were none
set +f
unset IFS

log "$SCRIPT finished, $COUNT DROP rules added"
